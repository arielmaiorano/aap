Apply by doing:
	cd /usr/src
	patch -p0 < 015_kerntime.patch
And then rebuild your kernel.

Index: sys/kern/kern_time.c
===================================================================
RCS file: /cvs/src/sys/kern/kern_time.c,v
retrieving revision 1.24
retrieving revision 1.24.2.1
diff -u -r1.24 -r1.24.2.1
--- sys/kern/kern_time.c	25 Jun 2001 03:28:03 -0000	1.24
+++ sys/kern/kern_time.c	7 Oct 2002 20:54:54 -0000	1.24.2.1
@@ -1,4 +1,4 @@
-/*	$OpenBSD: kern_time.c,v 1.24 2001/06/25 03:28:03 csapuntz Exp $	*/
+/*	$OpenBSD: kern_time.c,v 1.24.2.1 2002/10/07 20:54:54 miod Exp $	*/
 /*	$NetBSD: kern_time.c,v 1.20 1996/02/18 11:57:06 fvdl Exp $	*/
 
 /*
@@ -421,13 +421,13 @@
 	register_t *retval;
 {
 	register struct sys_getitimer_args /* {
-		syscallarg(u_int) which;
+		syscallarg(int) which;
 		syscallarg(struct itimerval *) itv;
 	} */ *uap = v;
 	struct itimerval aitv;
 	int s;
 
-	if (SCARG(uap, which) > ITIMER_PROF)
+	if (SCARG(uap, which) < ITIMER_REAL || SCARG(uap, which) > ITIMER_PROF)
 		return (EINVAL);
 	s = splclock();
 	if (SCARG(uap, which) == ITIMER_REAL) {
@@ -460,7 +460,7 @@
 	register_t *retval;
 {
 	register struct sys_setitimer_args /* {
-		syscallarg(u_int) which;
+		syscallarg(int) which;
 		syscallarg(struct itimerval *) itv;
 		syscallarg(struct itimerval *) oitv;
 	} */ *uap = v;
@@ -469,7 +469,7 @@
 	int s, error;
 	int timo;
 
-	if (SCARG(uap, which) > ITIMER_PROF)
+	if (SCARG(uap, which) < ITIMER_REAL || SCARG(uap, which) > ITIMER_PROF)
 		return (EINVAL);
 	itvp = SCARG(uap, itv);
 	if (itvp && (error = copyin((void *)itvp, (void *)&aitv,

