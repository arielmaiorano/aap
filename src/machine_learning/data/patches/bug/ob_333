Apply by doing:
        cd /usr/src
        patch -p0 < 004_openssl.patch

And then rebuild and install the library and statically-linked binaries
that depend upon it:

        cd lib/libssl
        make obj
        make depend
        make includes
        make
        make install
        cd ../../sbin
        make obj
        make depend
        make
        make install

Index: lib/libssl/src/ssl/t1_lib.c
===================================================================
RCS file: /cvs/src/lib/libssl/src/ssl/t1_lib.c,v
retrieving revision 1.5
diff -p -u -r1.5 t1_lib.c
--- lib/libssl/src/ssl/t1_lib.c	5 Jan 2009 21:36:39 -0000	1.5
+++ lib/libssl/src/ssl/t1_lib.c	16 Nov 2010 18:28:20 -0000
@@ -369,14 +369,23 @@ int ssl_parse_clienthello_tlsext(SSL *s,
 				switch (servname_type)
 					{
 				case TLSEXT_NAMETYPE_host_name:
-					if (s->session->tlsext_hostname == NULL)
+					if (!s->hit)
 						{
-						if (len > TLSEXT_MAXLEN_host_name || 
-							((s->session->tlsext_hostname = OPENSSL_malloc(len+1)) == NULL))
+						if(s->session->tlsext_hostname)
+							{
+							*al = SSL_AD_DECODE_ERROR;
+							return 0;
+							}
+						if (len > TLSEXT_MAXLEN_host_name)
 							{
 							*al = TLS1_AD_UNRECOGNIZED_NAME;
 							return 0;
 							}
+						if ((s->session->tlsext_hostname = OPENSSL_malloc(len+1)) == NULL)
+							{
+							*al = TLS1_AD_INTERNAL_ERROR;
+							return 0;
+							}
 						memcpy(s->session->tlsext_hostname, sdata, len);
 						s->session->tlsext_hostname[len]='\0';
 						if (strlen(s->session->tlsext_hostname) != len) {
@@ -389,7 +398,8 @@ int ssl_parse_clienthello_tlsext(SSL *s,
 
 						}
 					else 
-						s->servername_done = strlen(s->session->tlsext_hostname) == len 
+						s->servername_done = s->session->tlsext_hostname
+							&& strlen(s->session->tlsext_hostname) == len 
 							&& strncmp(s->session->tlsext_hostname, (char *)sdata, len) == 0;
 					
 					break;

Apply by doing:
	/usr/src
	patch -p0 < 003_vr.patch

Then build and install a new kernel.

Index: sys/dev/pci/if_vr.c
===================================================================
RCS file: /cvs/src/sys/dev/pci/if_vr.c,v
retrieving revision 1.105
retrieving revision 1.105.2.1
diff -u -r1.105 -r1.105.2.1
--- sys/dev/pci/if_vr.c	19 May 2010 15:27:35 -0000	1.105
+++ sys/dev/pci/if_vr.c	2 Oct 2010 03:00:52 -0000	1.105.2.1
@@ -1,4 +1,4 @@
-/*	$OpenBSD: if_vr.c,v 1.105 2010/05/19 15:27:35 oga Exp $	*/
+/*	$OpenBSD: if_vr.c,v 1.105.2.1 2010/10/02 03:00:52 william Exp $	*/
 
 /*
  * Copyright (c) 1997, 1998
@@ -1562,6 +1562,10 @@
 	d = r->vr_ptr;
 	d->vr_data = htole32(r->vr_map->dm_segs[0].ds_addr);
 	d->vr_ctl = htole32(VR_RXCTL | VR_RXLEN);
+
+	bus_dmamap_sync(sc->sc_dmat, sc->sc_listmap, 0,
+	    sc->sc_listmap->dm_mapsize, BUS_DMASYNC_PREWRITE);
+
 	d->vr_status = htole32(VR_RXSTAT);
 
 	bus_dmamap_sync(sc->sc_dmat, sc->sc_listmap, 0,

Apply by doing:
	/usr/src
	patch -p0 < 002_pci.patch

Then build and install a new kernel.

Index: sys/dev/pci/pci_map.c
===================================================================
RCS file: /cvs/src/sys/dev/pci/pci_map.c,v
retrieving revision 1.28
retrieving revision 1.28.4.1
diff -u -r1.28 -r1.28.4.1
--- sys/dev/pci/pci_map.c	28 Feb 2010 21:37:54 -0000	1.28
+++ sys/dev/pci/pci_map.c	2 Oct 2010 02:54:40 -0000	1.28.4.1
@@ -1,4 +1,4 @@
-/*      $OpenBSD: pci_map.c,v 1.28 2010/02/28 21:37:54 miod Exp $     */
+/*      $OpenBSD: pci_map.c,v 1.28.4.1 2010/10/02 02:54:40 william Exp $     */
 /*	$NetBSD: pci_map.c,v 1.7 2000/05/10 16:58:42 thorpej Exp $	*/
 
 /*-
@@ -320,7 +320,7 @@
 }
 
 int
-pci_mapreg_map(struct pci_attach_args *pa, int reg, pcireg_t type, int busflags,
+pci_mapreg_map(struct pci_attach_args *pa, int reg, pcireg_t type, int flags,
     bus_space_tag_t *tagp, bus_space_handle_t *handlep, bus_addr_t *basep,
     bus_size_t *sizep, bus_size_t maxsize)
 {
@@ -329,11 +329,10 @@
 	bus_addr_t base;
 	bus_size_t size;
 	pcireg_t csr;
-	int flags;
 	int rv;
 
 	if ((rv = pci_mapreg_info(pa->pa_pc, pa->pa_tag, reg, type,
-	    &base, &size, &flags)) != 0)
+	    &base, &size, NULL)) != 0)
 		return (rv);
 #if !defined(__sparc64__)
 	if (base == 0) {
@@ -393,7 +392,7 @@
 		size = maxsize;
 	}
 
-	if (bus_space_map(tag, base, size, busflags | flags, &handle))
+	if (bus_space_map(tag, base, size, flags, &handle))
 		return (1);
 
 	if (tagp != NULL)

Apply by doing:
	cd /usr/src
	patch -p0 < 001_bind.patch

And then rebuild and install bind:
	cd usr.sbin/bind
	make -f Makefile.bsd-wrapper obj
	make -f Makefile.bsd-wrapper depend
	make -f Makefile.bsd-wrapper
	make -f Makefile.bsd-wrapper install

Index: usr.sbin/bind/bin/named/query.c
===================================================================
RCS file: /cvs/src/usr.sbin/bind/bin/named/query.c,v
retrieving revision 1.8
diff -u -p -r1.8 query.c
--- usr.sbin/bind/bin/named/query.c	9 Dec 2007 13:39:42 -0000	1.8
+++ usr.sbin/bind/bin/named/query.c	29 Nov 2011 13:39:58 -0000
@@ -1239,11 +1239,9 @@ query_addadditional(void *arg, dns_name_
 			goto addname;
 		if (result == DNS_R_NCACHENXRRSET) {
 			dns_rdataset_disassociate(rdataset);
-			/*
-			 * Negative cache entries don't have sigrdatasets.
-			 */
-			INSIST(sigrdataset == NULL ||
-			       ! dns_rdataset_isassociated(sigrdataset));
+			if (sigrdataset != NULL &&
+			    dns_rdataset_isassociated(sigrdataset))
+				dns_rdataset_disassociate(sigrdataset);
 		}
 		if (result == ISC_R_SUCCESS) {
 			mname = NULL;
@@ -1284,8 +1282,9 @@ query_addadditional(void *arg, dns_name_
 			goto addname;
 		if (result == DNS_R_NCACHENXRRSET) {
 			dns_rdataset_disassociate(rdataset);
-			INSIST(sigrdataset == NULL ||
-			       ! dns_rdataset_isassociated(sigrdataset));
+			if (sigrdataset != NULL &&
+			    dns_rdataset_isassociated(sigrdataset))
+				dns_rdataset_disassociate(sigrdataset);
 		}
 		if (result == ISC_R_SUCCESS) {
 			mname = NULL;
@@ -1733,10 +1732,8 @@ query_addadditional2(void *arg, dns_name
 		goto setcache;
 	if (result == DNS_R_NCACHENXRRSET) {
 		dns_rdataset_disassociate(rdataset);
-		/*
-		 * Negative cache entries don't have sigrdatasets.
-		 */
-		INSIST(! dns_rdataset_isassociated(sigrdataset));
+		if (dns_rdataset_isassociated(sigrdataset))
+			dns_rdataset_disassociate(sigrdataset);
 	}
 	if (result == ISC_R_SUCCESS) {
 		/* Remember the result as a cache */
Index: usr.sbin/bind/lib/dns/rbtdb.c
===================================================================
RCS file: /cvs/src/usr.sbin/bind/lib/dns/rbtdb.c,v
retrieving revision 1.6
diff -u -p -r1.6 rbtdb.c
--- usr.sbin/bind/lib/dns/rbtdb.c	9 Dec 2007 13:39:43 -0000	1.6
+++ usr.sbin/bind/lib/dns/rbtdb.c	29 Nov 2011 13:39:58 -0000
@@ -244,6 +244,7 @@ typedef struct rdatasetheader {
 #define RDATASET_ATTR_IGNORE		0x0004
 #define RDATASET_ATTR_RETAIN		0x0008
 #define RDATASET_ATTR_NXDOMAIN		0x0010
+#define RDATASET_ATTR_NEGATIVE          0x0100
 
 typedef struct acache_cbarg {
 	dns_rdatasetadditional_t	type;
@@ -278,6 +279,8 @@ struct acachectl {
 	(((header)->attributes & RDATASET_ATTR_RETAIN) != 0)
 #define NXDOMAIN(header) \
 	(((header)->attributes & RDATASET_ATTR_NXDOMAIN) != 0)
+#define NEGATIVE(header) \
+        (((header)->attributes & RDATASET_ATTR_NEGATIVE) != 0)
 
 #define DEFAULT_NODE_LOCK_COUNT		7	/*%< Should be prime. */
 #define DEFAULT_CACHE_NODE_LOCK_COUNT	1009	/*%< Should be prime. */
@@ -3648,7 +3651,7 @@ cache_find(dns_db_t *db, dns_name_t *nam
 	    result == DNS_R_NCACHENXRRSET) {
 		bind_rdataset(search.rbtdb, node, found, search.now,
 			      rdataset);
-		if (foundsig != NULL)
+		if (!NEGATIVE(found) && foundsig != NULL)
 			bind_rdataset(search.rbtdb, node, foundsig, search.now,
 				      sigrdataset);
 	}
@@ -4234,7 +4237,7 @@ cache_findrdataset(dns_db_t *db, dns_dbn
 	}
 	if (found != NULL) {
 		bind_rdataset(rbtdb, rbtnode, found, now, rdataset);
-		if (foundsig != NULL)
+		if (!NEGATIVE(found) && foundsig != NULL)
 			bind_rdataset(rbtdb, rbtnode, foundsig, now,
 				      sigrdataset);
 	}

