Apply by doing:
        cd /usr/src
        patch -p0 < 017_libz.patch

And then rebuild and install libz:
        cd lib/libz
        make obj
        make depend
        make
        make install

Index: lib/libz/infback.c
===================================================================
RCS file: /cvs/src/lib/libz/infback.c,v
retrieving revision 1.2
retrieving revision 1.2.2.1
diff -u -p -r1.2 -r1.2.2.1
--- lib/libz/infback.c	17 Dec 2003 00:28:19 -0000	1.2
+++ lib/libz/infback.c	28 Aug 2004 16:21:46 -0000	1.2.2.1
@@ -446,6 +446,9 @@ void FAR *out_desc;
                 }
             }
 
+            if (state->mode == BAD)
+                break;
+
             /* build code tables */
             state->next = state->codes;
             state->lencode = (code const FAR *)(state->next);
Index: lib/libz/inflate.c
===================================================================
RCS file: /cvs/src/lib/libz/inflate.c,v
retrieving revision 1.6
retrieving revision 1.6.2.1
diff -u -p -r1.6 -r1.6.2.1
--- lib/libz/inflate.c	17 Dec 2003 00:28:19 -0000	1.6
+++ lib/libz/inflate.c	28 Aug 2004 16:21:46 -0000	1.6.2.1
@@ -909,6 +909,9 @@ int flush;
                         state->lens[state->have++] = (unsigned short)len;
                 }
             }
+
+            if (state->mode == BAD)
+                break;
 
             /* build code tables */
             state->next = state->codes;

Apply by doing:
        cd /usr/src
        patch -p0 < 016_bridge.patch

And then rebuild your kernel.

Index: sys/net/if_bridge.c
===================================================================
RCS file: /cvs/src/sys/net/if_bridge.c,v
retrieving revision 1.131
retrieving revision 1.131.2.1
diff -u -p -r1.131 -r1.131.2.1
--- sys/net/if_bridge.c	10 Feb 2004 20:20:01 -0000	1.131
+++ sys/net/if_bridge.c	25 Aug 2004 21:44:41 -0000	1.131.2.1
@@ -2274,9 +2274,9 @@ bridge_ipsec(int dir, int af, int hlen, 
 			splx(s);
 			return (1);
 		} else {
+			splx(s);
  skiplookup:
 			/* XXX do an input policy lookup */
-			splx(s);
 			return (0);
 		}
 	} else { /* Outgoing from the bridge. */

Apply by doing:
        cd /usr/src
        patch -p0 < 015_icmp.patch

And then rebuild your kernel.

Index: sys/netinet/tcp_subr.c
===================================================================
RCS file: /cvs/src/sys/netinet/tcp_subr.c,v
retrieving revision 1.77
retrieving revision 1.77.2.1
diff -u -p -r1.77 -r1.77.2.1
--- sys/netinet/tcp_subr.c	2 Mar 2004 12:51:12 -0000	1.77
+++ sys/netinet/tcp_subr.c	20 Aug 2004 22:41:33 -0000	1.77.2.1
@@ -801,19 +801,25 @@ tcp6_ctlinput(cmd, sa, d)
 	void *d;
 {
 	struct tcphdr th;
+	struct tcpcb *tp;
 	void (*notify)(struct inpcb *, int) = tcp_notify;
 	struct ip6_hdr *ip6;
 	const struct sockaddr_in6 *sa6_src = NULL;
 	struct sockaddr_in6 *sa6 = (struct sockaddr_in6 *)sa;
+	struct inpcb *inp;
 	struct mbuf *m;
+	tcp_seq seq;
 	int off;
 	struct {
 		u_int16_t th_sport;
 		u_int16_t th_dport;
+		u_int32_t th_seq;
 	} *thp;
 
 	if (sa->sa_family != AF_INET6 ||
-	    sa->sa_len != sizeof(struct sockaddr_in6))
+	    sa->sa_len != sizeof(struct sockaddr_in6) ||
+	    IN6_IS_ADDR_UNSPECIFIED(&sa6->sin6_addr) ||
+	    IN6_IS_ADDR_V4MAPPED(&sa6->sin6_addr))
 		return;
 	if ((unsigned)cmd >= PRC_NCMDS)
 		return;
@@ -859,19 +865,15 @@ tcp6_ctlinput(cmd, sa, d)
 #endif
 		m_copydata(m, off, sizeof(*thp), (caddr_t)&th);
 
+		/*
+		 * Check to see if we have a valid TCP connection
+		 * corresponding to the address in the ICMPv6 message
+		 * payload.
+		 */
+		inp = in6_pcbhashlookup(&tcbtable, &sa6->sin6_addr,
+		    th.th_dport, (struct in6_addr *)&sa6_src->sin6_addr,
+		    th.th_sport);
 		if (cmd == PRC_MSGSIZE) {
-			int valid = 0;
-
-			/*
-			 * Check to see if we have a valid TCP connection
-			 * corresponding to the address in the ICMPv6 message
-			 * payload.
-			 */
-			if (in6_pcbhashlookup(&tcbtable, &sa6->sin6_addr,
-			    th.th_dport, (struct in6_addr *)&sa6_src->sin6_addr,
-			    th.th_sport))
-				valid++;
-
 			/*
 			 * Depending on the value of "valid" and routing table
 			 * size (mtudisc_{hi,lo}wat), we will:
@@ -879,14 +881,17 @@ tcp6_ctlinput(cmd, sa, d)
 			 *   corresponding routing entry, or
 			 * - ignore the MTU change notification.
 			 */
-			icmp6_mtudisc_update((struct ip6ctlparam *)d, valid);
-
+			icmp6_mtudisc_update((struct ip6ctlparam *)d, inp != NULL);
 			return;
 		}
-
-		if (in6_pcbnotify(&tcbtable, sa, th.th_dport,
-		    (struct sockaddr *)sa6_src, th.th_sport, cmd, NULL, notify) == 0 &&
-		    syn_cache_count &&
+		if (inp) {
+			seq = ntohl(th.th_seq);
+			if (inp->inp_socket &&
+			    (tp = intotcpcb(inp)) &&
+			    SEQ_GEQ(seq, tp->snd_una) &&
+			    SEQ_LT(seq, tp->snd_max))
+				notify(inp, inet6ctlerrmap[cmd]);
+		} else if (syn_cache_count &&
 		    (inet6ctlerrmap[cmd] == EHOSTUNREACH ||
 		     inet6ctlerrmap[cmd] == ENETUNREACH ||
 		     inet6ctlerrmap[cmd] == EHOSTDOWN))
@@ -907,12 +912,19 @@ tcp_ctlinput(cmd, sa, v)
 {
 	struct ip *ip = v;
 	struct tcphdr *th;
+	struct tcpcb *tp;
+	struct inpcb *inp;
+	struct in_addr faddr;
+	tcp_seq seq;
 	extern int inetctlerrmap[];
 	void (*notify)(struct inpcb *, int) = tcp_notify;
 	int errno;
 
 	if (sa->sa_family != AF_INET)
 		return NULL;
+	faddr = satosin(sa)->sin_addr;
+	if (faddr.s_addr == INADDR_ANY)
+		return NULL;
 
 	if ((unsigned)cmd >= PRC_NCMDS)
 		return NULL;
@@ -921,24 +933,27 @@ tcp_ctlinput(cmd, sa, v)
 		notify = tcp_quench;
 	else if (PRC_IS_REDIRECT(cmd))
 		notify = in_rtchange, ip = 0;
-	else if (cmd == PRC_MSGSIZE && ip_mtudisc) {
-		th = (struct tcphdr *)((caddr_t)ip + (ip->ip_hl << 2));
+	else if (cmd == PRC_MSGSIZE && ip_mtudisc && ip) {
 		/*
 		 * Verify that the packet in the icmp payload refers
 		 * to an existing TCP connection.
 		 */
-		/*
-		 * XXX is it possible to get a valid PRC_MSGSIZE error for
-		 * a non-established connection?
-		 */
-		if (in_pcbhashlookup(&tcbtable,
-		    ip->ip_dst, th->th_dport, ip->ip_src, th->th_sport)) {
+		th = (struct tcphdr *)((caddr_t)ip + (ip->ip_hl << 2));
+		seq = ntohl(th->th_seq);
+		inp = in_pcbhashlookup(&tcbtable,
+		    ip->ip_dst, th->th_dport, ip->ip_src, th->th_sport);
+		if (inp && (tp = intotcpcb(inp)) &&
+		    SEQ_GEQ(seq, tp->snd_una) &&
+		    SEQ_LT(seq, tp->snd_max)) {
 			struct icmp *icp;
 			icp = (struct icmp *)((caddr_t)ip -
 					      offsetof(struct icmp, icmp_ip));
 
 			/* Calculate new mtu and create corresponding route */
 			icmp_mtudisc(icp);
+		} else {
+			/* ignore if we don't have a matching connection */
+			return NULL;
 		}
 		notify = tcp_mtudisc, ip = 0;
 	} else if (cmd == PRC_MTUINC)
@@ -950,9 +965,16 @@ tcp_ctlinput(cmd, sa, v)
 
 	if (ip) {
 		th = (struct tcphdr *)((caddr_t)ip + (ip->ip_hl << 2));
-		if (in_pcbnotify(&tcbtable, sa, th->th_dport, ip->ip_src,
-		    th->th_sport, errno, notify) == 0 &&
-		    syn_cache_count &&
+		inp = in_pcbhashlookup(&tcbtable,
+		    ip->ip_dst, th->th_dport, ip->ip_src, th->th_sport);
+		if (inp) {
+			seq = ntohl(th->th_seq);
+			if (inp->inp_socket &&
+			    (tp = intotcpcb(inp)) &&
+			    SEQ_GEQ(seq, tp->snd_una) &&
+			    SEQ_LT(seq, tp->snd_max))
+				notify(inp, errno);
+		} else if (syn_cache_count &&
 		    (inetctlerrmap[cmd] == EHOSTUNREACH ||
 		     inetctlerrmap[cmd] == ENETUNREACH ||
 		     inetctlerrmap[cmd] == EHOSTDOWN)) {

Apply by doing:
        cd /usr/src
        patch -p0 < 014_rnd.patch

And then rebuild your kernel.

Index: sys/dev/rnd.c
===================================================================
RCS file: /cvs/src/sys/dev/rnd.c,v
retrieving revision 1.67
retrieving revision 1.67.2.1
diff -u -p -r1.67 -r1.67.2.1
--- sys/dev/rnd.c	15 Mar 2004 14:17:25 -0000	1.67
+++ sys/dev/rnd.c	17 Jul 2004 02:57:54 -0000	1.67.2.1
@@ -264,6 +264,7 @@ int	rnd_debug = 0x0000;
  * For a pool of size 64, try x^64+x^62+x^38+x^10+x^6+x+1.
  */
 #define POOLBITS (POOLWORDS*32)
+#define POOLBYTES (POOLWORDS*4)
 #if POOLWORDS == 2048
 #define	TAP1	1638
 #define	TAP2	1231
@@ -964,15 +965,17 @@ randomread(dev, uio, ioflag)
 	struct uio *uio;
 	int	ioflag;
 {
-	int	ret = 0;
-	int	i;
+	int		ret = 0;
+	int		i;
+	u_int32_t 	*buf;
 
 	if (uio->uio_resid == 0)
 		return 0;
 
+	MALLOC(buf, u_int32_t *, POOLBYTES, M_TEMP, M_WAITOK);
+
 	while (!ret && uio->uio_resid > 0) {
-		u_int32_t buf[ POOLWORDS ];
-		int	n = min(sizeof(buf), uio->uio_resid);
+		int	n = min(POOLBYTES, uio->uio_resid);
 
 		switch(minor(dev)) {
 		case RND_RND:
@@ -1033,6 +1036,8 @@ randomread(dev, uio, ioflag)
 		if (n != 0 && ret == 0)
 			ret = uiomove((caddr_t)buf, n, uio);
 	}
+
+	FREE(buf, M_TEMP);
 	return ret;
 }
 
@@ -1126,7 +1131,8 @@ randomwrite(dev, uio, flags)
 	struct uio *uio;
 	int	flags;
 {
-	int	ret = 0;
+	int		ret = 0;
+	u_int32_t	*buf;
 
 	if (minor(dev) == RND_RND || minor(dev) == RND_PRND)
 		return ENXIO;
@@ -1134,9 +1140,10 @@ randomwrite(dev, uio, flags)
 	if (uio->uio_resid == 0)
 		return 0;
 
+	MALLOC(buf, u_int32_t *, POOLBYTES, M_TEMP, M_WAITOK);
+
 	while (!ret && uio->uio_resid > 0) {
-		u_int32_t	buf[ POOLWORDS ];
-		u_short		n = min(sizeof(buf),uio->uio_resid);
+		u_short	n = min(POOLBYTES, uio->uio_resid);
 
 		ret = uiomove((caddr_t)buf, n, uio);
 		if (!ret) {
@@ -1149,6 +1156,7 @@ randomwrite(dev, uio, flags)
 	if (minor(dev) == RND_ARND && !ret)
 		arc4random_initialized = 0;
 
+	FREE(buf, M_TEMP);
 	return ret;
 }
 

